#include "../graph.h"

#include <string>
#include <iostream>

#include "gtest.h"

TEST(SccTest, Simple) {
  Graph<std::string> g([] (const std::string & x) { return x; });
  g.add_node("3357753222134796045");
  g.add_node("941518681376349552");
  g.add_node("13971683083290263089");
  g.add_node("12084232970677807325");
  g.add_node("9439046497947219020");
  g.add_node("10068515029147533478");
  g.add_node("7671566943364943083");
  g.add_node("13654097157440985242");
  g.add_node("2665757309026036634");
  g.add_node("3559450766265662919");
  g.add_node("18378408929752357014");
  g.add_node("17699076361709972611");
  g.add_node("4479026691834579114");
  g.add_node("3606313706927141800");
  g.add_edge("3357753222134796045"  , "13971683083290263089");
  g.add_edge("3357753222134796045"  , "12084232970677807325");
  g.add_edge("3357753222134796045"  , "4479026691834579114");
  g.add_edge("941518681376349552"   , "9439046497947219020");
  g.add_edge("941518681376349552"   , "3606313706927141800");
  g.add_edge("13971683083290263089" , "12084232970677807325");
  g.add_edge("13971683083290263089" , "9439046497947219020");
  g.add_edge("13971683083290263089" , "10068515029147533478");
  g.add_edge("13971683083290263089" , "2665757309026036634");
  g.add_edge("12084232970677807325" , "17699076361709972611");
  g.add_edge("9439046497947219020"  , "3606313706927141800");
  g.add_edge("10068515029147533478" , "13654097157440985242");
  g.add_edge("7671566943364943083"  , "13654097157440985242");
  g.add_edge("13654097157440985242" , "18378408929752357014");
  g.add_edge("2665757309026036634"  , "3559450766265662919");
  g.add_edge("3559450766265662919"  , "18378408929752357014");
  g.add_edge("18378408929752357014" , "17699076361709972611");
  g.add_edge("17699076361709972611" , "4479026691834579114");
  g.add_edge("4479026691834579114", "3357753222134796045");
  g.add_edge("3606313706927141800", "941518681376349552");

  // Print original
  std::cerr << g << std::endl;

  // Print condensed graph
  std::cerr << g.condensation(std::less<std::string>()) << std::endl;
}
